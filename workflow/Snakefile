include: "rules/setup.smk"


rule all:
    input:
        # only request one, since they're all generated at the same time
        COMPILED_PROTOS[0],
        # Same with the instances, one script generates all of them
        # this isn't really how snakemake is meant to be used, but these both just get us
        # to a starting point where we can start using snakemake as it was intended
        SCEN_FILE,
        # ALL_PB_GRAPH_FILES,
        ALL_PB_SCEN_FILES[0:100],
        [file for file in ALL_JSON_LOCATION_FILES if "grid" not in file],


rule mapf_to_protobuf:
    input:
        scenario_file="Shuntyard-Instance-Generator/quasi_real_instances/exp/{exp}/{layout}/{graph}.0r{scenario}.scen",
        graph_file="Shuntyard-Instance-Generator/quasi_real_instances/exp/{exp}/{layout}/{graph}.0r.graph",
    params:
        graph_output_file="mapf_protobuf_format_instances/{exp}/{layout}/{graph}.0r.graph.pb",
    output:
        scenario_output_file="mapf_protobuf_format_instances/{exp}/{layout}/{graph}.0r{scenario}.scen.pb",
    shell:
        "python workflow/scripts/mapf_to_protobuf.py {input.scenario_file} {input.graph_file} {output.scenario_output_file} {params.graph_output_file}"


rule mapf_to_protobuf_graph:
    input:
        graph_file="Shuntyard-Instance-Generator/quasi_real_instances/exp/{exp}/{layout}/{graph}.0r.graph",
    output:
        graph_output_file="mapf_protobuf_format_instances/{exp}/{layout}/{graph}.0r.graph.pb",
    shell:
        "python workflow/scripts/mapf_to_protobuf_graph.py {input.graph_file} {output.graph_output_file}"


rule protobuf_to_tors_location:
    input:
        location_file="mapf_protobuf_format_instances/{exp}/{graph}.0r/{graph}.0r.graph.pb",
        script="workflow/scripts/protobuf_to_tors_location.py",
    params:
        length=100,
    output:
        location_file="tors_instances/{exp}/{graph}.0r_location.json",
    shell:
        "python {input.script} {input.location_file} {output.location_file} --length {params.length}"
